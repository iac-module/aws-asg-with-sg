variable "security_group" {
  description = "Security group variables"
  type = object({
    create                                                   = optional(bool, true)
    create_sg                                                = optional(bool, true)
    security_group_id                                        = optional(string, null)
    vpc_id                                                   = string
    name                                                     = string
    use_name_prefix                                          = optional(bool, true)
    description                                              = optional(string, "Security Group managed by Terraform")
    revoke_rules_on_delete                                   = optional(bool, false)
    tags                                                     = optional(map(string), {})
    create_timeout                                           = optional(string, "10m")
    delete_timeout                                           = optional(string, "15m")
    ingress_rules                                            = optional(list(string), [])
    ingress_with_self                                        = optional(list(map(string)), [])
    ingress_with_cidr_blocks                                 = optional(list(map(string)), [])
    ingress_with_ipv6_cidr_blocks                            = optional(list(map(string)), [])
    ingress_with_source_security_group_id                    = optional(list(map(string)), [])
    ingress_cidr_blocks                                      = optional(list(string), [])
    ingress_ipv6_cidr_blocks                                 = optional(list(string), [])
    ingress_prefix_list_ids                                  = optional(list(string), [])
    ingress_with_prefix_list_ids                             = optional(list(map(string)), [])
    computed_ingress_rules                                   = optional(list(string), [])
    computed_ingress_with_self                               = optional(list(map(string)), [])
    computed_ingress_with_cidr_blocks                        = optional(list(map(string)), [])
    computed_ingress_with_ipv6_cidr_blocks                   = optional(list(map(string)), [])
    computed_ingress_with_source_security_group_id           = optional(list(map(string)), [])
    computed_ingress_with_prefix_list_ids                    = optional(list(map(string)), [])
    number_of_computed_ingress_rules                         = optional(number, 0)
    number_of_computed_ingress_with_self                     = optional(number, 0)
    number_of_computed_ingress_with_cidr_blocks              = optional(number, 0)
    number_of_computed_ingress_with_ipv6_cidr_blocks         = optional(number, 0)
    number_of_computed_ingress_with_source_security_group_id = optional(number, 0)
    number_of_computed_ingress_with_prefix_list_ids          = optional(number, 0)
    egress_rules                                             = optional(list(string), [])
    egress_with_self                                         = optional(list(map(string)), [])
    egress_with_cidr_blocks = optional(list(map(string)), [{
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      description = "Allow outgoing https connection"
      cidr_blocks = "0.0.0.0/0"
    }])
    egress_with_ipv6_cidr_blocks                            = optional(list(map(string)), [])
    egress_with_source_security_group_id                    = optional(list(map(string)), [])
    egress_with_prefix_list_ids                             = optional(list(map(string)), [])
    egress_cidr_blocks                                      = optional(list(string), ["0.0.0.0/0"])
    egress_ipv6_cidr_blocks                                 = optional(list(string), ["::/0"])
    egress_prefix_list_ids                                  = optional(list(string), [])
    computed_egress_rules                                   = optional(list(string), [])
    computed_egress_with_self                               = optional(list(map(string)), [])
    computed_egress_with_cidr_blocks                        = optional(list(map(string)), [])
    computed_egress_with_ipv6_cidr_blocks                   = optional(list(map(string)), [])
    computed_egress_with_source_security_group_id           = optional(list(map(string)), [])
    computed_egress_with_prefix_list_ids                    = optional(list(map(string)), [])
    number_of_computed_egress_rules                         = optional(number, 0)
    number_of_computed_egress_with_self                     = optional(number, 0)
    number_of_computed_egress_with_cidr_blocks              = optional(number, 0)
    number_of_computed_egress_with_ipv6_cidr_blocks         = optional(number, 0)
    number_of_computed_egress_with_source_security_group_id = optional(number, 0)
    number_of_computed_egress_with_prefix_list_ids          = optional(number, 0)
    putin_khuylo                                            = optional(bool, true)
  })
}


variable "autoscaling" {
  description = "Security group variables"
  type = object({

    create                          = optional(bool, true)
    ignore_desired_capacity_changes = optional(bool, false)
    name                            = string
    use_name_prefix                 = optional(bool, true)
    instance_name                   = optional(string, "")
    launch_template_id              = optional(string, null)
    launch_template_version         = optional(string, null)
    availability_zones              = optional(list(string), null)
    vpc_zone_identifier             = optional(list(string), null)
    min_size                        = optional(number, 0)
    max_size                        = optional(number, 5)
    desired_capacity                = optional(string, 0)
    desired_capacity_type           = optional(string, null)
    capacity_rebalance              = optional(bool, null)
    min_elb_capacity                = optional(number, null)
    wait_for_elb_capacity           = optional(number, null)
    wait_for_capacity_timeout       = optional(string, null)
    default_cooldown                = optional(number, null)
    default_instance_warmup         = optional(number, null)
    protect_from_scale_in           = optional(bool, false)
    load_balancers                  = optional(list(string), [])
    target_group_arns               = optional(list(string), [])
    placement_group                 = optional(string, null)
    health_check_type               = optional(string, "EC2")
    health_check_grace_period       = optional(number, null)
    force_delete                    = optional(bool, null)
    termination_policies            = optional(list(string), [])
    suspended_processes             = optional(list(string), [])
    max_instance_lifetime           = optional(number, null)
    enabled_metrics                 = optional(list(string), [])
    metrics_granularity             = optional(string, null)
    service_linked_role_arn         = optional(string, null)
    initial_lifecycle_hooks         = optional(list(map(string)), [])
    instance_refresh                = optional(any, {})
    use_mixed_instances_policy      = optional(bool, false)
    mixed_instances_policy          = optional(any, {})
    delete_timeout                  = optional(string, null)
    tags                            = optional(map(string), {})
    warm_pool                       = optional(any, {})
    ebs_optimized                   = optional(bool, null)
    image_id                        = optional(string, "")
    instance_type                   = optional(string, null)
    instance_requirements           = optional(any, {})
    key_name                        = optional(string, null)
    user_data                       = optional(string, null)
    security_groups                 = optional(list(string), [])
    enable_monitoring               = optional(bool, true)
    metadata_options                = optional(map(string), {})
    autoscaling_group_tags = optional(map(string), {
      AmazonECSManaged = true
    })
    ignore_failed_scaling_activities     = optional(bool, false)
    instance_maintenance_policy          = optional(map(any), {})
    create_launch_template               = optional(bool, true)
    launch_template_name                 = optional(string, "")
    launch_template_use_name_prefix      = optional(bool, true)
    launch_template_description          = optional(string, null)
    default_version                      = optional(string, null)
    update_default_version               = optional(string, null)
    disable_api_termination              = optional(bool, false)
    disable_api_stop                     = optional(bool, false)
    instance_initiated_shutdown_behavior = optional(string, null)
    kernel_id                            = optional(string, null)
    ram_disk_id                          = optional(string, null)
    block_device_mappings                = optional(list(any), [])
    capacity_reservation_specification   = optional(any, {})
    cpu_options                          = optional(map(string), {})
    credit_specification                 = optional(map(string), {})
    elastic_gpu_specifications           = optional(map(string), {})
    elastic_inference_accelerator        = optional(map(string), {})
    enclave_options                      = optional(map(string), {})
    hibernation_options                  = optional(map(string), {})
    instance_market_options              = optional(any, {})
    license_specifications               = optional(map(string), {})
    maintenance_options                  = optional(any, {})
    network_interfaces                   = optional(list(any), [])
    placement                            = optional(map(string), {})
    private_dns_name_options             = optional(map(string), {})
    tag_specifications                   = optional(list(any), [])
    create_traffic_source_attachment     = optional(bool, false)
    traffic_source_identifier            = optional(string, "")
    traffic_source_type                  = optional(string, "elbv2")
    create_schedule                      = optional(bool, true)
    schedules                            = optional(map(any), {})
    create_scaling_policy                = optional(bool, true)
    scaling_policies                     = optional(any, {})
    create_iam_instance_profile          = optional(bool, false)
    iam_instance_profile_arn             = optional(string, null)
    iam_instance_profile_name            = optional(string, null)
    iam_role_name                        = optional(string, null)
    iam_role_use_name_prefix             = optional(bool, true)
    iam_role_path                        = optional(string, null)
    iam_role_description                 = optional(string, null)
    iam_role_permissions_boundary        = optional(string, null)
    iam_role_policies = optional(map(string), {
      AmazonEC2ContainerServiceforEC2Role = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      AmazonSSMManagedInstanceCore        = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
    })
    iam_role_tags = optional(map(string), {})
    putin_khuylo  = optional(bool, true)
  })
}
